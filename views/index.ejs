<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
  <head>
    <title>Portal</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
      body {
        font-family: "Inter", "Segoe UI", sans-serif;
      }
      h2 {
        font-weight: 700; /* or 700 for bold */
      }
      h3 {
        font-weight: 600;
      }
      .overlay {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black */
        z-index: 10; /* Ensure it appears above the rest of the content */
        display: flex; /* Use flexbox to center the spinner */
      }

    </style>
  </head>
  <body>
  <div class="container mt-5 position-relative">

    <div class="row justify-content-center">
      <div class="col-8">
        <div class="card">
          <div class="overlay d-none justify-content-center align-items-center">
            <div class="spinner-border text-light" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
          <div class="card-body">
            <h2 class="card-title text-center mb-4">Push website to devices</h2>
            <form id="website-form">
              <div class="mb-3">
                <label for="website" class="form-label">Website URL</label>
                <input type="url" class="form-control" id="website" placeholder="https://example.com" required>
              </div>
              <button type="submit" class="btn btn-primary w-100">Submit</button>
            </form>
          </div>
        </div>
        <div id="alert_section"></div>
        <div id="accordion-container"></div>
      </div>
    </div>
  </div>
  <!-- Option 1: Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function createAccordion(accordionData) {
      // Create the main accordion div
      const accordionDiv = document.createElement('div');
      accordionDiv.className = 'accordion';

      accordionData.forEach((data, index) => {
        // Create the accordion item div
        const itemDiv = document.createElement('div');
        itemDiv.className = 'accordion-item';

        // Create the accordion header
        const h2 = document.createElement('h2');
        h2.className = 'accordion-header';

        const button = document.createElement('button');
        button.className = 'accordion-button collapsed';
        button.type = 'button';
        button.dataset.bsToggle = 'collapse';
        button.dataset.bsTarget = `#collapse${index}`;
        button.setAttribute('aria-expanded', 'false');
        button.setAttribute('aria-controls', `collapse${index}`);
        button.innerHTML = data.header;

        h2.appendChild(button);

        // Create the accordion collapse div
        const collapseDiv = document.createElement('div');
        collapseDiv.id = `collapse${index}`;
        collapseDiv.className = 'accordion-collapse collapse';
        collapseDiv.dataset.bsParent = `#accordion`;

        const bodyDiv = document.createElement('div');
        bodyDiv.className = 'accordion-body';
        bodyDiv.innerHTML = data.body;

        collapseDiv.appendChild(bodyDiv);

        // Append the header and collapse div to the item div
        itemDiv.appendChild(h2);
        itemDiv.appendChild(collapseDiv);

        // Append the item div to the main accordion div
        accordionDiv.appendChild(itemDiv);
      });

      // Return the created accordion
      return accordionDiv;
    }

    function encodeHTML(str) {
      const element = document.createElement('div');
      element.innerText = str;
      return element.innerHTML;
    }

    function showLoading(show) {
      const overlay = document.querySelector('.overlay');
      overlay.classList.toggle('d-none', !show);
    }

    document.getElementById('website-form').addEventListener('submit', function (event) {
      event.preventDefault();

      const provided_url = document.getElementById("website").value;
      showLoading(true);
      document.getElementById("accordion-container").innerHTMl = "";
      fetch("/push", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({url: provided_url}),
      }).then((response) => {
        if (response.ok) {
          response.json()
            .then(r => {
              r.forEach((data, index) => {
                const header = `${data.ip} (Device ${index+1})`;
                let body = ``
                if (data.success === data.total) {
                  body += `<p class="text-success">${data.success}/${data.total} Successful</p>`
                } else {
                  body += `<p class="text-warning">${data.success}/${data.total} Successful</p>`
                  body += `<p class="text-danger">${data.fail}/${data.total} Failed</p>`
                }

                let cmd_accordion_data = []
                console.log(r);
                data.requests.forEach((cmd_data, cmd_index) => {
                  console.log(cmd_data);
                  const cmd_header = `<code>${encodeHTML(cmd_data.cmd)}</code>`;
                  let cmd_body = "<p>Executed correctly: <span class="
                  cmd_body += cmd_data.success === true ? `"text-success"><i class="bi bi-check-lg"></i></span>` : `"text-warning"><i class="bi bi-x-lg"></i></span>` + "</p>";
                  cmd_body += `<h5>Output</h5><pre><code>${cmd_data.stdout > 0 ? encodeHTML(cmd_data.stdout): "No output"}</code></pre>`
                  cmd_accordion_data.push({header: cmd_header, body: cmd_body});
                })
                const cmd_accordion = createAccordion(cmd_accordion_data);
                body += cmd_accordion.outerHTML;
                const accordion = createAccordion([{header, body}]);
                document.getElementById("accordion-container").appendChild(accordion);
              })
            })
        } else {
          console.log(response.status);
        }
      }).finally(() => {
        showLoading(false);
      })
    })
  </script>
  </body>
</html>
